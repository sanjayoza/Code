#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov  1 13:08:48 2018

@author: soza
"""
import numpy as np
import time
import sys

# ----------------------
# Create a one dim array
# ----------------------
a = np.array([1,2,3])
print(a)

# --------------------
# Create a 2 dim array
# --------------------

a = np.array([(1,2,3), (4,5,6)])
print(a)

# ----------------------------------------------------------------------
# Advantages of using numpy v/s List
# 1. Consumes less memory than List
# 2. Works faster than List
# 3. More convient to use since it has who bunch of methods and classes
# ----------------------------------------------------------------------

# 1. Cosumes less memory - Compare size of list v/s numpy array
S = range(1000)
# get the size of one element and then multiply by size of array
print(sys.getsizeof(2) * len(S))     # 28000

D = np.arange(1000)
print(D.size * D.itemsize)           # 8000


# 2. Faster than List
ASIZE = 1000000

l1 = range(ASIZE)
l2 = range(ASIZE)

start = time.time()

result = [(x, y) for x, y in zip(l1, l2)]

print((time.time() - start) * 1000)     # multipy by 1000 to get millisec

# takes 511.4610195159912 ms

np1 = np.arange(ASIZE)
np2 = np.arange(ASIZE)

start = time.time()

# more convient since we do not have to run loop
result = np1 + np2

print((time.time() - start) * 1000)     # multipy by 1000 to get millisec

# takes 125.71144104003906 ms
# 511 v/s 125 ms

# -------------------------------------
# Create a 2D array with zero as values
# -------------------------------------
a = np.zeros((3, 4))
print(a)
# [[0. 0. 0. 0.]
#  [0. 0. 0. 0.]
#  [0. 0. 0. 0.]]

# -----------------------------
# Create a 2D array with shorts
# -----------------------------
b = np.ones((2,3), dtype = np.int16)
print(b)
print(b.dtype)
# [[1 1 1]
#  [1 1 1]]
# int16

# -------------------------------------------------
# Create a empty 2D array, values are uninitialized
# -------------------------------------------------
b = np.empty((2, 3))
print(b)
print(b.dtype)
# [[ 6.93214433e-310  4.63658498e-310  4.63658497e-310]
#  [-6.87352092e+108  6.93214338e-310  6.93210675e-310]]
# float64


# ----------------
# numpy operations
# ----------------
# 1. Find the dimension size of array  (use ndim function e.g. a.ndim)
# 2. Find the byte size of each element in an array (use a.itemsize)
# 3. Find the data type of the elements (use a.dtype)
# 4. Find the size of the array (use a.size)
# 5. Find the shape of the array i.e. num col, num rows
a = np.array([1,2,3, 4, 5, 6])
print(a.shape)                   # (6, )   6 columns

a = np.array([(1,2,3, 4), (8,9, 10, 11), (13,14,15, 16)])
print(a.shape)                   # (3, 4) 3 col, 3 rows

a = np.array([(1,2,3, 4), (8,9, 10), (13,14,15)])
print(a.shape)                   # (3, ) 3 col


# ------------------
# Reshaping of array
# ------------------
a = np.array([(1, 2, 3, 4), (5, 6, 7, 8)])
print(a.shape)                  # 2 rows and 4 col
print(a)
# (2, 4)
# [[1 2 3 4]
#  [5 6 7 8]]

a = a.reshape(4, 2)
print(a.shape)
print(a)

# (4, 2)
# [[1 2]
#  [3 4]
#  [5 6]
#  [7 8]]

# --------------------------------------------------
# Slicing - extracting set of elements from an array
# --------------------------------------------------
a = np.array([(1, 2, 3, 4), (5, 6, 7, 8)])

# to get 3
print(a[0, 2])

# to get 4 and 8
print(a[0:, 3])

a = np.array([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)])

# to just print 4 and 8 and not 12
print(a[0:2, 3])

# ----------------
# line space array
# ----------------
a = np.linspace(1, 3, 5)

print(a)
# [1.  1.5 2.  2.5 3. ]

a = np.linspace(1, 3, 10)
print(a)
# [1.         1.22222222 1.44444444 1.66666667 1.88888889 2.11111111
# 2.33333333 2.55555556 2.77777778 3.  ]

# --------------------------
# Find min, max and sum
# a.min(), a.max(), a.sum()
# --------------------------

# -----------------------------------------------------
# axis concept - rows are axis 1 and columns are axis 0
# The axis can be used to perform operation on row only or
# columns only
# -----------------------------------------------------
a = np.array([(1, 2, 3), (4, 5, 6)])

# print sum of each column
print(a.sum(axis = 0))       # [5 7 9]

# print sum of each row
print(a.sum(axis = 1))       # [ 6 15]

# print sum rows
print(np.sum(a.sum(axis = 1)))  # 21

# ---------------------------
# Square root of each element
# ---------------------------
print(np.sqrt(a))
# [[1.         1.41421356 1.73205081]
#  [2.         2.23606798 2.44948974]]

#----------------------------
# Standard deviation of array
#----------------------------
print(np.std(a))   # 1.707825127659933

# ---------------------------------------------
# Math operations (+, -, *, /) on each element
# ---------------------------------------------
a = np.array([(1, 2, 3), (4, 5, 6)])
b = np.array([(1, 2, 3), (4, 5, 6)])

# note if this is done on List then it will concatenate a and b
print(a+b)
# [[ 2  4  6]
#  [ 8 10 12]]

# similarly a*b, a-b and a / b

# ---------------------------------------------------------
# Concatenation - vertical stacking and horitonzal stacking
# ---------------------------------------------------------
a = np.array([(1, 2, 3), (4, 5, 6)])
b = np.array([(7, 8, 9), (10, 11, 12)])
print(np.vstack((a,b)))

# [[ 1  2  3]
#  [ 4  5  6]
#  [ 7  8  9]
#  [10 11 12]]

print(np.hstack((a,b)))
# [[ 1  2  3  7  8  9]
#  [ 4  5  6 10 11 12]]

#---------------------------
# Convert to a single column
#---------------------------
print(a.ravel())   # [1 2 3 4 5 6]

